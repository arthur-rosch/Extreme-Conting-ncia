"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solufy+evolution-sdk@0.2.1";
exports.ids = ["vendor-chunks/@solufy+evolution-sdk@0.2.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@solufy+evolution-sdk@0.2.1/node_modules/@solufy/evolution-sdk/lib/index.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@solufy+evolution-sdk@0.2.1/node_modules/@solufy/evolution-sdk/lib/index.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatId: () => (/* binding */ ChatId),\n/* harmony export */   EvolutionApiError: () => (/* binding */ EvolutionApiError),\n/* harmony export */   EvolutionClient: () => (/* binding */ EvolutionClient),\n/* harmony export */   GroupJid: () => (/* binding */ GroupJid),\n/* harmony export */   Jid: () => (/* binding */ Jid),\n/* harmony export */   MessageId: () => (/* binding */ MessageId),\n/* harmony export */   phoneNumberFromJid: () => (/* binding */ phoneNumberFromJid)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js\");\n/* harmony import */ var libphonenumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! libphonenumber-js */ \"(rsc)/./node_modules/.pnpm/libphonenumber-js@1.12.10/node_modules/libphonenumber-js/min/exports/parsePhoneNumberWithError.js\");\n/* harmony import */ var libphonenumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! libphonenumber-js */ \"(rsc)/./node_modules/.pnpm/libphonenumber-js@1.12.10/node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/api/errors.ts\n\nvar EvolutionApiError = class _EvolutionApiError extends Error {\n  constructor(message, cause) {\n    const error = getErrorMessage(cause);\n    super(message, error ? void 0 : { cause });\n    this.name = _EvolutionApiError.name;\n    this.message = error ?? message;\n  }\n};\nvar ErrorMessages = [\n  ErrorMessage(\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod__WEBPACK_IMPORTED_MODULE_0__.object({\n          exists: zod__WEBPACK_IMPORTED_MODULE_0__.literal(false),\n          jid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n          number: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n      )\n    }),\n    \"Provided number is not a valid WhatsApp number\"\n  ),\n  ErrorMessage(\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().includes(\"Media upload failed on all hosts\"))\n    }),\n    \"Media upload failed on all hosts\"\n  ),\n  ErrorMessage(\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().includes(\"AxiosError\"))\n    }),\n    (response) => response.message[0]\n  ),\n  ErrorMessage(\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().includes(\"No session\"))\n    }),\n    \"No session found, try restarting your instance\"\n  ),\n  ErrorMessage(\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().includes(\"AggregateError\"))\n    }),\n    \"AggregateError\"\n  )\n];\nfunction getErrorMessage(response) {\n  const error = ErrorMessages.find(\n    (message) => message.schema.safeParse(response).success\n  );\n  return error ? typeof error.message === \"string\" ? error.message : (\n    // biome-ignore lint/suspicious/noExplicitAny: Generic\n    error.message(response)\n  ) : void 0;\n}\nfunction ErrorMessage(schema, message) {\n  return { schema, message };\n}\n\n// src/api/service.ts\nvar ApiService = class {\n  constructor(options) {\n    this.options = options;\n  }\n  async get(path, options = {}) {\n    return this.request(path, { ...options, method: \"GET\" });\n  }\n  async post(path, options = {}) {\n    return this.request(path, { ...options, method: \"POST\" });\n  }\n  async put(path, options = {}) {\n    return this.request(path, { ...options, method: \"PUT\" });\n  }\n  async patch(path, options = {}) {\n    return this.request(path, { ...options, method: \"PATCH\" });\n  }\n  async delete(path, options = {}) {\n    return this.request(path, { ...options, method: \"DELETE\" });\n  }\n  async request(path, options = {}) {\n    const { init, params } = this.makeInit(options);\n    const url = new URL(\n      `/${path}/${this.options.instance}/?${params}`,\n      this.options.serverUrl\n    );\n    const response = await fetch(url, init);\n    const data = await response.json();\n    if (!response.ok || \"error\" in data) {\n      throw new EvolutionApiError(\n        `${this.options.instance} ${data.error || \"Unknown Error\"}`,\n        data.response\n      );\n    }\n    return data;\n  }\n  makeInit(options) {\n    const { params: _, headers, body, ...rest } = options;\n    const paramsInit = options.params && Object.entries(options.params).filter(([, value]) => Boolean(value)).map(([key, value]) => [key, String(value)]);\n    const params = new URLSearchParams(paramsInit);\n    const init = {\n      ...rest,\n      headers: { ...headers || {}, apikey: this.options.token }\n    };\n    if (body) {\n      init.headers[\"Content-Type\"] = body instanceof FormData ? \"multipart/form-data\" : \"application/json\";\n      init.body = body instanceof FormData ? body : JSON.stringify(body);\n    }\n    return { init, params };\n  }\n};\n\n// src/api/routes.ts\nvar Routes = {\n  Message: {\n    SendText: \"message/sendText\",\n    SendMedia: \"message/sendMedia\",\n    SendVoice: \"message/sendWhatsAppAudio\",\n    SendSticker: \"message/sendSticker\",\n    SendLocation: \"message/sendLocation\",\n    SendContact: \"message/sendContact\",\n    SendPoll: \"message/sendPoll\"\n  },\n  Chats: {\n    Check: \"chat/whatsappNumbers\",\n    FindAll: \"chat/findChats\",\n    SendPresence: \"chat/sendPresence\"\n  },\n  Groups: {\n    FindAll: \"group/fetchAllGroups\",\n    FindByJid: \"group/findGroupInfos\",\n    FindByInviteCode: \"group/inviteInfo\"\n  }\n};\n\n// src/modules/chats/schemas/check.ts\n\n\n\n// src/schemas/common.ts\n\n\nvar PhoneNumberSchema = zod__WEBPACK_IMPORTED_MODULE_0__.custom((value) => (0,libphonenumber_js__WEBPACK_IMPORTED_MODULE_1__.isValidPhoneNumber)(value), \"Invalid phone number\").transform((phoneNumber) => (0,libphonenumber_js__WEBPACK_IMPORTED_MODULE_2__.parsePhoneNumberWithError)(phoneNumber).number);\nvar JidSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().endsWith(\n  \"@s.whatsapp.net\",\n  \"Invalid remote JID, should end with @s.whatsapp.net\"\n);\nvar GroupJidSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().endsWith(\n  \"@g.us\",\n  \"Invalid group JID, should end with @g.us\"\n);\nvar GroupInviteCodeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().length(22).regex(\n  /^[a-zA-Z0-9]{22}$/,\n  \"Invalid group invite code\"\n);\nvar ApiNumberSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n  PhoneNumberSchema,\n  JidSchema,\n  GroupJidSchema\n]);\nvar mediaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string().url(), zod__WEBPACK_IMPORTED_MODULE_0__.string().base64()]);\n\n// src/types/tags.ts\nvar Jid = (jid) => jid;\nvar GroupJid = (jid) => jid;\nvar MessageId = (id) => id;\nvar ChatId = (id) => id;\n\n// src/modules/chats/schemas/check.ts\nvar CheckOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(PhoneNumberSchema);\nvar CheckBodySchema = CheckOptionsSchema.transform((data) => ({\n  numbers: Array.isArray(data) ? data : [data]\n}));\nvar CheckResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    exists: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    jid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    number: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n).transform(\n  (numbers) => numbers.map((number) => ({\n    exists: number.exists,\n    jid: Jid(number.jid),\n    number: (0,libphonenumber_js__WEBPACK_IMPORTED_MODULE_2__.parsePhoneNumberWithError)(number.number).number\n  }))\n);\n\n// src/modules/chats/schemas/find-all.ts\n\n\n// src/utils/phone-numer-from-jid.ts\n\nfunction phoneNumberFromJid(jid) {\n  return (0,libphonenumber_js__WEBPACK_IMPORTED_MODULE_2__.parsePhoneNumberWithError)(`+${jid.split(\"@\")[0]}`).number;\n}\n\n// src/modules/chats/schemas/find-all.ts\nvar FindAllChatsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    labels: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).nullish(),\n    createdAt: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date(),\n    updatedAt: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date(),\n    pushName: zod__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    profilePicUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().nullish()\n  })\n).transform(\n  (chats) => chats.map((chat) => ({\n    id: ChatId(chat.id),\n    jid: chat.remoteJid.endsWith(\"@g.us\") ? GroupJid(chat.remoteJid) : Jid(chat.remoteJid),\n    phoneNumber: phoneNumberFromJid(chat.remoteJid),\n    name: chat.name || void 0,\n    labels: chat.labels || void 0,\n    createdAt: chat.createdAt,\n    updatedAt: chat.updatedAt,\n    pushName: chat.pushName || void 0,\n    pictureUrl: chat.profilePicUrl || void 0\n  }))\n);\n\n// src/modules/chats/schemas/presence.ts\n\nvar PresenceOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Chat number or JID to receve the presence\n   */\n  number: ApiNumberSchema,\n  /**\n   * Duration of the presence in millisseconds\n   */\n  duration: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n  /**\n   * Presence state\n   * - `composing`: typing a message\n   * - `recording`: recording an audio\n   */\n  presence: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"composing\", \"recording\"]),\n  /**\n   * Whether to wait until the presence is finished (duration)\n   */\n  waitUntilFinish: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nvar PresenceBodySchema = PresenceOptionsSchema.transform(\n  ({ waitUntilFinish, duration, ...data }) => ({ ...data, delay: duration })\n);\n\n// src/modules/chats/index.ts\nvar ChatsModule = class {\n  constructor(api) {\n    this.api = api;\n  }\n  /**\n   * Checks if a number has WhatsApp\n   * @param numbers - Number(s) (with country code) to check\n   */\n  async check(...numbers) {\n    const body = CheckBodySchema.parse(numbers.flat());\n    const response = await this.api.post(Routes.Chats.Check, { body });\n    return CheckResponseSchema.parse(response);\n  }\n  /**\n   * Gets all chats\n   */\n  async findAll() {\n    const response = await this.api.post(Routes.Chats.FindAll);\n    return FindAllChatsResponseSchema.parse(response);\n  }\n  /**\n   * Sends a presence to a certain chat\n   * @param options - Presence options\n   */\n  async sendPresence(options) {\n    const body = PresenceBodySchema.parse(options);\n    if (options.waitUntilFinish) {\n      await this.api.post(Routes.Chats.SendPresence, { body });\n    } else {\n      this.api.post(Routes.Chats.SendPresence, { body });\n    }\n  }\n};\n\n// src/modules/groups/index.ts\n\n\n// src/modules/groups/schemas/find-all.ts\n\n\n// src/modules/groups/schemas/common.ts\n\nvar GroupResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  subject: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  subjectOwner: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  subjectTime: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date(),\n  pictureUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().nullish(),\n  size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n  creation: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date(),\n  owner: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  restrict: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n  announce: zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n});\nvar ParticipantResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  admin: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"admin\", \"superadmin\"]).nullish()\n});\nvar GroupWithParticipantsResponseSchema = GroupResponseSchema.extend({\n  participants: zod__WEBPACK_IMPORTED_MODULE_0__.array(ParticipantResponseSchema)\n});\nvar GroupResponseSchemaTransform = (group) => ({\n  jid: GroupJid(group.id),\n  name: group.subject,\n  pictureUrl: group.pictureUrl || void 0,\n  size: group.size,\n  subject: {\n    owner: Jid(group.subjectOwner),\n    time: group.subjectTime\n  },\n  owner: {\n    jid: Jid(group.owner),\n    phoneNumber: phoneNumberFromJid(group.owner)\n  },\n  createdAt: group.creation,\n  restrict: group.restrict,\n  announce: group.announce\n});\nvar ParticipantResponseSchemaTransform = (participant) => ({\n  id: participant.id,\n  role: participant.admin || \"member\"\n});\nvar GroupWithParticipantsResponseSchemaTransform = (group) => ({\n  ...GroupResponseSchemaTransform(group),\n  participants: group.participants.map(ParticipantResponseSchemaTransform)\n});\n\n// src/modules/groups/schemas/find-all.ts\nvar FindAllGroupsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(GroupResponseSchema).transform(\n  (groups) => groups.map((group) => GroupResponseSchemaTransform(group))\n);\nvar FindAllGroupsWithParticipantsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(GroupWithParticipantsResponseSchema).transform(\n  (groups) => groups.map((group) => GroupWithParticipantsResponseSchemaTransform(group))\n);\n\n// src/modules/groups/schemas/find-by-invite-code.ts\n\nvar FindGroupByInviteCodeResponseSchema = GroupWithParticipantsResponseSchema.extend({\n  isCommunity: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n  isCommunityAnnounce: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n  joinApprovalMode: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n  memberAddMode: zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n}).omit({ pictureUrl: true }).transform((group) => ({\n  ...GroupWithParticipantsResponseSchemaTransform({\n    ...group,\n    pictureUrl: null\n  }),\n  isCommunity: group.isCommunity,\n  isCommunityAnnounce: group.isCommunityAnnounce,\n  joinApprovalMode: group.joinApprovalMode,\n  memberAddMode: group.memberAddMode\n}));\n\n// src/modules/groups/schemas/find-by-jid.ts\nvar FindGroupByJidResponseSchema = GroupWithParticipantsResponseSchema.transform(\n  GroupWithParticipantsResponseSchemaTransform\n);\n\n// src/modules/groups/index.ts\nvar GroupsModule = class {\n  constructor(api) {\n    this.api = api;\n  }\n  async findAll(getParticipants = false) {\n    const response = await this.api.get(Routes.Groups.FindAll, {\n      params: { getParticipants: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().parse(getParticipants) }\n    });\n    if (getParticipants) {\n      return FindAllGroupsWithParticipantsResponseSchema.parse(response);\n    }\n    return FindAllGroupsResponseSchema.parse(response);\n  }\n  /**\n   * Gets a group by invite code\n   * @param inviteCode - The group invite code (not the URL)\n   */\n  async findByInviteCode(inviteCode) {\n    const response = await this.api.get(Routes.Groups.FindByInviteCode, {\n      params: { inviteCode: GroupInviteCodeSchema.parse(inviteCode) }\n    });\n    return FindGroupByInviteCodeResponseSchema.parse(response);\n  }\n  /**\n   * Gets a group by JID\n   * @param groupJid - The group JID terminated with \\@g.us\n   */\n  async findByJid(groupJid) {\n    const response = await this.api.get(Routes.Groups.FindByJid, {\n      params: { groupJid: GroupJidSchema.parse(groupJid) }\n    });\n    return FindGroupByJidResponseSchema.parse(response);\n  }\n};\n\n// src/modules/messages/schemas/audio.ts\n\n\n// src/modules/messages/schemas/base.ts\n\nvar BaseMessageOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Number (with country code) or JID to receive the message\n   */\n  number: ApiNumberSchema,\n  /**\n   * Time in milliseconds before sending message\n   */\n  delay: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n});\n\n// src/modules/messages/schemas/audio.ts\nvar AudioMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Audio URL or file in base64\n   */\n  audio: mediaSchema,\n  /**\n   * Audio mimetype\n   */\n  mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar AudioMessageBodySchema = AudioMessageOptionsSchema.transform(\n  ({ audio, ...data }) => ({ ...data, media: audio, mediatype: \"audio\" })\n);\nvar AudioMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    audioMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n      mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      fileSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileLength: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number(),\n      seconds: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n      mediaKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileEncSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      directPath: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      mediaKeyTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number().transform((value) => new Date(value))\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  media: {\n    url: data.message.audioMessage.url,\n    mimetype: data.message.audioMessage.mimetype,\n    length: data.message.audioMessage.fileLength,\n    durationInSeconds: data.message.audioMessage.seconds,\n    sha256: data.message.audioMessage.fileSha256,\n    encryptedSha256: data.message.audioMessage.fileEncSha256,\n    directPath: data.message.audioMessage.directPath,\n    key: data.message.audioMessage.mediaKey,\n    keyTimestamp: data.message.audioMessage.mediaKeyTimestamp\n  },\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/contact.ts\n\n\nvar ContactMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Contact list\n   */\n  contacts: zod__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      /**\n       * Contact display name\n       */\n      fullName: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      /**\n       * Contact phone number\n       */\n      phoneNumber: PhoneNumberSchema,\n      /**\n       * Contact organization\n       */\n      organization: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n       * Contact email\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email().optional(),\n      /**\n       * Contact website url\n       */\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().optional()\n    })\n  )\n});\nvar ContactMessageBodySchema = ContactMessageOptionsSchema.transform(\n  ({ contacts, ...data }) => ({\n    ...data,\n    contact: contacts.map((contact) => ({\n      ...contact,\n      phoneNumber: (0,libphonenumber_js__WEBPACK_IMPORTED_MODULE_2__.parsePhoneNumberWithError)(contact.phoneNumber).formatInternational(),\n      wuid: contact.phoneNumber.replace(/\\D/g, \"\")\n    }))\n  })\n);\nvar ContactMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      contactMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        displayName: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        vcard: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    }),\n    zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      contactsArrayMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        contacts: zod__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            displayName: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            vcard: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        )\n      })\n    })\n  ]),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  contacts: \"contactMessage\" in data.message ? [data.message.contactMessage] : data.message.contactsArrayMessage.contacts,\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/document.ts\n\nvar DocumentMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Document URL or file in base64\n   */\n  document: mediaSchema,\n  /**\n   * Caption to send with document\n   */\n  caption: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Document mimetype\n   */\n  mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Name of the file\n   */\n  fileName: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n}).refine(\n  (data) => URL.canParse(data.document) ? true : Boolean(data.fileName),\n  {\n    message: \"fileName must be provided when document is not an URL\",\n    path: [\"fileName\"]\n  }\n);\nvar DocumentMessageBodySchema = DocumentMessageOptionsSchema.transform(\n  ({ document, ...data }) => ({\n    ...data,\n    media: document,\n    mediatype: \"document\"\n  })\n);\nvar DocumentMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    documentMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n      mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      fileSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileLength: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number(),\n      mediaKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      caption: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      fileName: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      fileEncSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      directPath: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      mediaKeyTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number().transform((value) => new Date(value))\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  media: {\n    url: data.message.documentMessage.url,\n    caption: data.message.documentMessage.caption,\n    mimetype: data.message.documentMessage.mimetype,\n    length: data.message.documentMessage.fileLength,\n    sha256: data.message.documentMessage.fileSha256,\n    fileName: data.message.documentMessage.fileName,\n    encryptedSha256: data.message.documentMessage.fileEncSha256,\n    directPath: data.message.documentMessage.directPath,\n    key: data.message.documentMessage.mediaKey,\n    keyTimestamp: data.message.documentMessage.mediaKeyTimestamp\n  },\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/image.ts\n\nvar ImageMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Image URL or file in base64\n   */\n  image: mediaSchema,\n  /**\n   * Caption to send with image\n   */\n  caption: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Image mimetype\n   */\n  mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar ImageMessageBodySchema = ImageMessageOptionsSchema.transform(\n  ({ image, ...data }) => ({ ...data, media: image, mediatype: \"image\" })\n);\nvar ImageMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    imageMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n      mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      fileSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileLength: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number(),\n      height: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n      width: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n      mediaKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      caption: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      fileEncSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      directPath: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      mediaKeyTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number().transform((value) => new Date(value))\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  media: {\n    url: data.message.imageMessage.url,\n    caption: data.message.imageMessage.caption,\n    mimetype: data.message.imageMessage.mimetype,\n    length: data.message.imageMessage.fileLength,\n    height: data.message.imageMessage.height,\n    width: data.message.imageMessage.width,\n    sha256: data.message.imageMessage.fileSha256,\n    encryptedSha256: data.message.imageMessage.fileEncSha256,\n    directPath: data.message.imageMessage.directPath,\n    key: data.message.imageMessage.mediaKey,\n    keyTimestamp: data.message.imageMessage.mediaKeyTimestamp\n  },\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/location.ts\n\nvar LocationMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Location name\n   */\n  name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  /**\n   * Location address\n   */\n  address: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  /**\n   * Location latitude\n   */\n  latitude: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n  /**\n   * Location longitude\n   */\n  longitude: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar LocationMessageBodySchema = LocationMessageOptionsSchema;\nvar LocationMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    locationMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      degreesLatitude: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n      degreesLongitude: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n      name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      address: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  location: {\n    latitude: data.message.locationMessage.degreesLatitude,\n    longitude: data.message.locationMessage.degreesLongitude,\n    name: data.message.locationMessage.name,\n    address: data.message.locationMessage.address\n  },\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/sticker.ts\n\nvar StickerMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Image URL or file in base64\n   */\n  sticker: mediaSchema\n});\nvar StickerMessageBodySchema = StickerMessageOptionsSchema;\nvar StickerMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    stickerMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n      fileSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileEncSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      mediaKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      directPath: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      fileLength: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number(),\n      mediaKeyTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number().transform((value) => new Date(value))\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  media: {\n    url: data.message.stickerMessage.url,\n    mimetype: data.message.stickerMessage.mimetype,\n    length: data.message.stickerMessage.fileLength,\n    sha256: data.message.stickerMessage.fileSha256,\n    encryptedSha256: data.message.stickerMessage.fileEncSha256,\n    directPath: data.message.stickerMessage.directPath,\n    key: data.message.stickerMessage.mediaKey,\n    keyTimestamp: data.message.stickerMessage.mediaKeyTimestamp\n  },\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/text.ts\n\nvar TextMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Message text content\n   */\n  text: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  /**\n   * Whether link preview should be shown\n   */\n  linkPreview: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional()\n});\nvar TextMessageBodySchema = TextMessageOptionsSchema;\nvar TextMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  messageId: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/video.ts\n\nvar VideoMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Video URL or file in base64\n   */\n  video: mediaSchema,\n  /**\n   * Caption to send with video\n   */\n  caption: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Video mimetype\n   */\n  mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar VideoMessageBodySchema = VideoMessageOptionsSchema.transform(\n  ({ video, ...data }) => ({ ...data, media: video, mediatype: \"video\" })\n);\nvar VideoMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    videoMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n      mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      fileSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileLength: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number(),\n      mediaKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      caption: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      gifPlayback: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n      fileEncSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      directPath: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      mediaKeyTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number().transform((value) => new Date(value))\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  media: {\n    url: data.message.videoMessage.url,\n    caption: data.message.videoMessage.caption,\n    mimetype: data.message.videoMessage.mimetype,\n    gifPlayback: data.message.videoMessage.gifPlayback,\n    length: data.message.videoMessage.fileLength,\n    sha256: data.message.videoMessage.fileSha256,\n    encryptedSha256: data.message.videoMessage.fileEncSha256,\n    directPath: data.message.videoMessage.directPath,\n    key: data.message.videoMessage.mediaKey,\n    keyTimestamp: data.message.videoMessage.mediaKeyTimestamp\n  },\n  id: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/schemas/voice.ts\n\nvar VoiceMessageOptionsSchema = BaseMessageOptionsSchema.extend({\n  /**\n   * Audio URL or file in base64\n   */\n  audio: mediaSchema,\n  /**\n   * Encode audio into WhatsApp default format (allows audio to be sped up)\n   * @default true\n   */\n  encoding: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional().default(true)\n});\nvar VoiceMessageBodySchema = VoiceMessageOptionsSchema;\nvar VoiceMessageResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    remoteJid: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    audioMessage: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n      url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n      mimetype: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      fileSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileLength: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number(),\n      seconds: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n      ptt: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n      mediaKey: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      fileEncSha256: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64(),\n      directPath: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n      mediaKeyTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.number().transform((value) => new Date(value)),\n      waveform: zod__WEBPACK_IMPORTED_MODULE_0__.string().base64().nullish()\n    })\n  }),\n  messageTimestamp: zod__WEBPACK_IMPORTED_MODULE_0__.coerce.date()\n}).transform((data) => ({\n  receiver: {\n    phoneNumber: phoneNumberFromJid(data.key.remoteJid),\n    jid: Jid(data.key.remoteJid)\n  },\n  media: {\n    url: data.message.audioMessage.url,\n    mimetype: data.message.audioMessage.mimetype,\n    length: data.message.audioMessage.fileLength,\n    durationInSeconds: data.message.audioMessage.seconds,\n    sha256: data.message.audioMessage.fileSha256,\n    encryptedSha256: data.message.audioMessage.fileEncSha256,\n    directPath: data.message.audioMessage.directPath,\n    /**\n     * Indicates whether the audio message is a push-to-talk (PTT) message\n     */\n    isPtt: data.message.audioMessage.ptt,\n    key: data.message.audioMessage.mediaKey,\n    keyTimestamp: data.message.audioMessage.mediaKeyTimestamp,\n    waveform: data.message.audioMessage.waveform\n  },\n  messageId: MessageId(data.key.id),\n  timestamp: data.messageTimestamp\n}));\n\n// src/modules/messages/index.ts\nvar MessagesModule = class {\n  constructor(api) {\n    this.api = api;\n  }\n  /**\n   * Sends a text message\n   * @param options - Text message options\n   */\n  async sendText(options) {\n    const body = TextMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendText, { body });\n    return TextMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends an image\n   * @param options - Image message options\n   */\n  async sendImage(options) {\n    const body = ImageMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendMedia, { body });\n    return ImageMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends a video\n   * @param options - Video message options\n   */\n  async sendVideo(options) {\n    const body = VideoMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendMedia, { body });\n    return VideoMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends a document\n   * @param options - Document message options\n   */\n  async sendDocument(options) {\n    const body = DocumentMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendMedia, { body });\n    return DocumentMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends an audio\n   * @param options - Audio message options\n   */\n  async sendAudio(options) {\n    const body = AudioMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendMedia, { body });\n    return AudioMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends a voice message\n   * @param options - Voice message options\n   */\n  async sendVoice(options) {\n    const body = VoiceMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendVoice, { body });\n    return VoiceMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends a sticker\n   * @param options - Sticker message options\n   */\n  async sendSticker(options) {\n    const body = StickerMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendSticker, { body });\n    return StickerMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends a location\n   * @param options - Location message options\n   */\n  async sendLocation(options) {\n    const body = LocationMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendLocation, { body });\n    return LocationMessageResponseSchema.parse(response);\n  }\n  /**\n   * Sends a contact\n   * @param options - Contact message options\n   */\n  async sendContact(options) {\n    const body = ContactMessageBodySchema.parse(options);\n    const response = await this.api.post(Routes.Message.SendContact, { body });\n    return ContactMessageResponseSchema.parse(response);\n  }\n};\n\n// src/schemas/client.ts\n\nvar ClientOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Your server URL\n   */\n  serverUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n  /**\n   * Your instance token or global API key\n   */\n  token: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  /**\n   * Your instance name\n   */\n  instance: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\n\n// src/index.ts\nvar EvolutionClient = class {\n  /**\n   * Evolution Client - API client for interacting with the Evolution API\n   * @param options - Client options\n   */\n  constructor(options) {\n    this.options = options;\n    /**\n     * API service for directly interacting with the Evolution API (no specific typings)\n     */\n    __publicField(this, \"api\");\n    /**\n     * Find and manage chats, send presences and check numbers\n     */\n    __publicField(this, \"chats\");\n    /**\n     * Find and manage groups\n     */\n    __publicField(this, \"groups\");\n    /**\n     * Send messages\n     */\n    __publicField(this, \"messages\");\n    ClientOptionsSchema.parse(options);\n    this.api = new ApiService(options);\n    this.chats = new ChatsModule(this.api);\n    this.groups = new GroupsModule(this.api);\n    this.messages = new MessagesModule(this.api);\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@solufy+evolution-sdk@0.2.1/node_modules/@solufy/evolution-sdk/lib/index.mjs\n");

/***/ })

};
;