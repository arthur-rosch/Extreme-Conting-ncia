"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@otplib+core@12.0.1";
exports.ids = ["vendor-chunks/@otplib+core@12.0.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@otplib+core@12.0.1/node_modules/@otplib/core/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/@otplib+core@12.0.1/node_modules/@otplib/core/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @otplib/core\n *\n * @author Gerald Yeo <contact@fusedthought.com>\n * @version: 12.0.1\n * @license: MIT\n **/\n\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nfunction objectValues(value) {\n  return Object.keys(value).map(key => value[key]);\n}\n(function (HashAlgorithms) {\n  HashAlgorithms[\"SHA1\"] = \"sha1\";\n  HashAlgorithms[\"SHA256\"] = \"sha256\";\n  HashAlgorithms[\"SHA512\"] = \"sha512\";\n})(exports.HashAlgorithms || (exports.HashAlgorithms = {}));\nconst HASH_ALGORITHMS = objectValues(exports.HashAlgorithms);\n(function (KeyEncodings) {\n  KeyEncodings[\"ASCII\"] = \"ascii\";\n  KeyEncodings[\"BASE64\"] = \"base64\";\n  KeyEncodings[\"HEX\"] = \"hex\";\n  KeyEncodings[\"LATIN1\"] = \"latin1\";\n  KeyEncodings[\"UTF8\"] = \"utf8\";\n})(exports.KeyEncodings || (exports.KeyEncodings = {}));\nconst KEY_ENCODINGS = objectValues(exports.KeyEncodings);\n(function (Strategy) {\n  Strategy[\"HOTP\"] = \"hotp\";\n  Strategy[\"TOTP\"] = \"totp\";\n})(exports.Strategy || (exports.Strategy = {}));\nconst STRATEGY = objectValues(exports.Strategy);\nconst createDigestPlaceholder = () => {\n  throw new Error('Please provide an options.createDigest implementation.');\n};\nfunction isTokenValid(value) {\n  return /^(\\d+)$/.test(value);\n}\nfunction padStart(value, maxLength, fillString) {\n  if (value.length >= maxLength) {\n    return value;\n  }\n  const padding = Array(maxLength + 1).join(fillString);\n  return `${padding}${value}`.slice(-1 * maxLength);\n}\nfunction keyuri(options) {\n  const tmpl = `otpauth://${options.type}/{labelPrefix}:{accountName}?secret={secret}{query}`;\n  const params = [];\n  if (STRATEGY.indexOf(options.type) < 0) {\n    throw new Error(`Expecting options.type to be one of ${STRATEGY.join(', ')}. Received ${options.type}.`);\n  }\n  if (options.type === 'hotp') {\n    if (options.counter == null || typeof options.counter !== 'number') {\n      throw new Error('Expecting options.counter to be a number when options.type is \"hotp\".');\n    }\n    params.push(`&counter=${options.counter}`);\n  }\n  if (options.type === 'totp' && options.step) {\n    params.push(`&period=${options.step}`);\n  }\n  if (options.digits) {\n    params.push(`&digits=${options.digits}`);\n  }\n  if (options.algorithm) {\n    params.push(`&algorithm=${options.algorithm.toUpperCase()}`);\n  }\n  if (options.issuer) {\n    params.push(`&issuer=${encodeURIComponent(options.issuer)}`);\n  }\n  return tmpl.replace('{labelPrefix}', encodeURIComponent(options.issuer || options.accountName)).replace('{accountName}', encodeURIComponent(options.accountName)).replace('{secret}', options.secret).replace('{query}', params.join(''));\n}\nclass OTP {\n  constructor(defaultOptions = {}) {\n    this._defaultOptions = Object.freeze({ ...defaultOptions\n    });\n    this._options = Object.freeze({});\n  }\n  create(defaultOptions = {}) {\n    return new OTP(defaultOptions);\n  }\n  clone(defaultOptions = {}) {\n    const instance = this.create({ ...this._defaultOptions,\n      ...defaultOptions\n    });\n    instance.options = this._options;\n    return instance;\n  }\n  get options() {\n    return Object.freeze({ ...this._defaultOptions,\n      ...this._options\n    });\n  }\n  set options(options) {\n    this._options = Object.freeze({ ...this._options,\n      ...options\n    });\n  }\n  allOptions() {\n    return this.options;\n  }\n  resetOptions() {\n    this._options = Object.freeze({});\n  }\n}\n\nfunction hotpOptionsValidator(options) {\n  if (typeof options.createDigest !== 'function') {\n    throw new Error('Expecting options.createDigest to be a function.');\n  }\n  if (typeof options.createHmacKey !== 'function') {\n    throw new Error('Expecting options.createHmacKey to be a function.');\n  }\n  if (typeof options.digits !== 'number') {\n    throw new Error('Expecting options.digits to be a number.');\n  }\n  if (!options.algorithm || HASH_ALGORITHMS.indexOf(options.algorithm) < 0) {\n    throw new Error(`Expecting options.algorithm to be one of ${HASH_ALGORITHMS.join(', ')}. Received ${options.algorithm}.`);\n  }\n  if (!options.encoding || KEY_ENCODINGS.indexOf(options.encoding) < 0) {\n    throw new Error(`Expecting options.encoding to be one of ${KEY_ENCODINGS.join(', ')}. Received ${options.encoding}.`);\n  }\n}\nconst hotpCreateHmacKey = (algorithm, secret, encoding) => {\n  return Buffer.from(secret, encoding).toString('hex');\n};\nfunction hotpDefaultOptions() {\n  const options = {\n    algorithm: exports.HashAlgorithms.SHA1,\n    createHmacKey: hotpCreateHmacKey,\n    createDigest: createDigestPlaceholder,\n    digits: 6,\n    encoding: exports.KeyEncodings.ASCII\n  };\n  return options;\n}\nfunction hotpOptions(opt) {\n  const options = { ...hotpDefaultOptions(),\n    ...opt\n  };\n  hotpOptionsValidator(options);\n  return Object.freeze(options);\n}\nfunction hotpCounter(counter) {\n  const hexCounter = counter.toString(16);\n  return padStart(hexCounter, 16, '0');\n}\nfunction hotpDigestToToken(hexDigest, digits) {\n  const digest = Buffer.from(hexDigest, 'hex');\n  const offset = digest[digest.length - 1] & 0xf;\n  const binary = (digest[offset] & 0x7f) << 24 | (digest[offset + 1] & 0xff) << 16 | (digest[offset + 2] & 0xff) << 8 | digest[offset + 3] & 0xff;\n  const token = binary % Math.pow(10, digits);\n  return padStart(String(token), digits, '0');\n}\nfunction hotpDigest(secret, counter, options) {\n  const hexCounter = hotpCounter(counter);\n  const hmacKey = options.createHmacKey(options.algorithm, secret, options.encoding);\n  return options.createDigest(options.algorithm, hmacKey, hexCounter);\n}\nfunction hotpToken(secret, counter, options) {\n  const hexDigest = options.digest || hotpDigest(secret, counter, options);\n  return hotpDigestToToken(hexDigest, options.digits);\n}\nfunction hotpCheck(token, secret, counter, options) {\n  if (!isTokenValid(token)) {\n    return false;\n  }\n  const systemToken = hotpToken(secret, counter, options);\n  return token === systemToken;\n}\nfunction hotpKeyuri(accountName, issuer, secret, counter, options) {\n  return keyuri({\n    algorithm: options.algorithm,\n    digits: options.digits,\n    type: exports.Strategy.HOTP,\n    accountName,\n    counter,\n    issuer,\n    secret\n  });\n}\nclass HOTP extends OTP {\n  create(defaultOptions = {}) {\n    return new HOTP(defaultOptions);\n  }\n  allOptions() {\n    return hotpOptions(this.options);\n  }\n  generate(secret, counter) {\n    return hotpToken(secret, counter, this.allOptions());\n  }\n  check(token, secret, counter) {\n    return hotpCheck(token, secret, counter, this.allOptions());\n  }\n  verify(opts) {\n    if (typeof opts !== 'object') {\n      throw new Error('Expecting argument 0 of verify to be an object');\n    }\n    return this.check(opts.token, opts.secret, opts.counter);\n  }\n  keyuri(accountName, issuer, secret, counter) {\n    return hotpKeyuri(accountName, issuer, secret, counter, this.allOptions());\n  }\n}\n\nfunction parseWindowBounds(win) {\n  if (typeof win === 'number') {\n    return [Math.abs(win), Math.abs(win)];\n  }\n  if (Array.isArray(win)) {\n    const [past, future] = win;\n    if (typeof past === 'number' && typeof future === 'number') {\n      return [Math.abs(past), Math.abs(future)];\n    }\n  }\n  throw new Error('Expecting options.window to be an number or [number, number].');\n}\nfunction totpOptionsValidator(options) {\n  hotpOptionsValidator(options);\n  parseWindowBounds(options.window);\n  if (typeof options.epoch !== 'number') {\n    throw new Error('Expecting options.epoch to be a number.');\n  }\n  if (typeof options.step !== 'number') {\n    throw new Error('Expecting options.step to be a number.');\n  }\n}\nconst totpPadSecret = (secret, encoding, minLength) => {\n  const currentLength = secret.length;\n  const hexSecret = Buffer.from(secret, encoding).toString('hex');\n  if (currentLength < minLength) {\n    const newSecret = new Array(minLength - currentLength + 1).join(hexSecret);\n    return Buffer.from(newSecret, 'hex').slice(0, minLength).toString('hex');\n  }\n  return hexSecret;\n};\nconst totpCreateHmacKey = (algorithm, secret, encoding) => {\n  switch (algorithm) {\n    case exports.HashAlgorithms.SHA1:\n      return totpPadSecret(secret, encoding, 20);\n    case exports.HashAlgorithms.SHA256:\n      return totpPadSecret(secret, encoding, 32);\n    case exports.HashAlgorithms.SHA512:\n      return totpPadSecret(secret, encoding, 64);\n    default:\n      throw new Error(`Expecting algorithm to be one of ${HASH_ALGORITHMS.join(', ')}. Received ${algorithm}.`);\n  }\n};\nfunction totpDefaultOptions() {\n  const options = {\n    algorithm: exports.HashAlgorithms.SHA1,\n    createDigest: createDigestPlaceholder,\n    createHmacKey: totpCreateHmacKey,\n    digits: 6,\n    encoding: exports.KeyEncodings.ASCII,\n    epoch: Date.now(),\n    step: 30,\n    window: 0\n  };\n  return options;\n}\nfunction totpOptions(opt) {\n  const options = { ...totpDefaultOptions(),\n    ...opt\n  };\n  totpOptionsValidator(options);\n  return Object.freeze(options);\n}\nfunction totpCounter(epoch, step) {\n  return Math.floor(epoch / step / 1000);\n}\nfunction totpToken(secret, options) {\n  const counter = totpCounter(options.epoch, options.step);\n  return hotpToken(secret, counter, options);\n}\nfunction totpEpochsInWindow(epoch, direction, deltaPerEpoch, numOfEpoches) {\n  const result = [];\n  if (numOfEpoches === 0) {\n    return result;\n  }\n  for (let i = 1; i <= numOfEpoches; i++) {\n    const delta = direction * i * deltaPerEpoch;\n    result.push(epoch + delta);\n  }\n  return result;\n}\nfunction totpEpochAvailable(epoch, step, win) {\n  const bounds = parseWindowBounds(win);\n  const delta = step * 1000;\n  return {\n    current: epoch,\n    past: totpEpochsInWindow(epoch, -1, delta, bounds[0]),\n    future: totpEpochsInWindow(epoch, 1, delta, bounds[1])\n  };\n}\nfunction totpCheck(token, secret, options) {\n  if (!isTokenValid(token)) {\n    return false;\n  }\n  const systemToken = totpToken(secret, options);\n  return token === systemToken;\n}\nfunction totpCheckByEpoch(epochs, token, secret, options) {\n  let position = null;\n  epochs.some((epoch, idx) => {\n    if (totpCheck(token, secret, { ...options,\n      epoch\n    })) {\n      position = idx + 1;\n      return true;\n    }\n    return false;\n  });\n  return position;\n}\nfunction totpCheckWithWindow(token, secret, options) {\n  if (totpCheck(token, secret, options)) {\n    return 0;\n  }\n  const epochs = totpEpochAvailable(options.epoch, options.step, options.window);\n  const backward = totpCheckByEpoch(epochs.past, token, secret, options);\n  if (backward !== null) {\n    return backward * -1;\n  }\n  return totpCheckByEpoch(epochs.future, token, secret, options);\n}\nfunction totpTimeUsed(epoch, step) {\n  return Math.floor(epoch / 1000) % step;\n}\nfunction totpTimeRemaining(epoch, step) {\n  return step - totpTimeUsed(epoch, step);\n}\nfunction totpKeyuri(accountName, issuer, secret, options) {\n  return keyuri({\n    algorithm: options.algorithm,\n    digits: options.digits,\n    step: options.step,\n    type: exports.Strategy.TOTP,\n    accountName,\n    issuer,\n    secret\n  });\n}\nclass TOTP extends HOTP {\n  create(defaultOptions = {}) {\n    return new TOTP(defaultOptions);\n  }\n  allOptions() {\n    return totpOptions(this.options);\n  }\n  generate(secret) {\n    return totpToken(secret, this.allOptions());\n  }\n  checkDelta(token, secret) {\n    return totpCheckWithWindow(token, secret, this.allOptions());\n  }\n  check(token, secret) {\n    const delta = this.checkDelta(token, secret);\n    return typeof delta === 'number';\n  }\n  verify(opts) {\n    if (typeof opts !== 'object') {\n      throw new Error('Expecting argument 0 of verify to be an object');\n    }\n    return this.check(opts.token, opts.secret);\n  }\n  timeRemaining() {\n    const options = this.allOptions();\n    return totpTimeRemaining(options.epoch, options.step);\n  }\n  timeUsed() {\n    const options = this.allOptions();\n    return totpTimeUsed(options.epoch, options.step);\n  }\n  keyuri(accountName, issuer, secret) {\n    return totpKeyuri(accountName, issuer, secret, this.allOptions());\n  }\n}\n\nfunction authenticatorOptionValidator(options) {\n  totpOptionsValidator(options);\n  if (typeof options.keyDecoder !== 'function') {\n    throw new Error('Expecting options.keyDecoder to be a function.');\n  }\n  if (options.keyEncoder && typeof options.keyEncoder !== 'function') {\n    throw new Error('Expecting options.keyEncoder to be a function.');\n  }\n}\nfunction authenticatorDefaultOptions() {\n  const options = {\n    algorithm: exports.HashAlgorithms.SHA1,\n    createDigest: createDigestPlaceholder,\n    createHmacKey: totpCreateHmacKey,\n    digits: 6,\n    encoding: exports.KeyEncodings.HEX,\n    epoch: Date.now(),\n    step: 30,\n    window: 0\n  };\n  return options;\n}\nfunction authenticatorOptions(opt) {\n  const options = { ...authenticatorDefaultOptions(),\n    ...opt\n  };\n  authenticatorOptionValidator(options);\n  return Object.freeze(options);\n}\nfunction authenticatorEncoder(secret, options) {\n  return options.keyEncoder(secret, options.encoding);\n}\nfunction authenticatorDecoder(secret, options) {\n  return options.keyDecoder(secret, options.encoding);\n}\nfunction authenticatorGenerateSecret(numberOfBytes, options) {\n  const key = options.createRandomBytes(numberOfBytes, options.encoding);\n  return authenticatorEncoder(key, options);\n}\nfunction authenticatorToken(secret, options) {\n  return totpToken(authenticatorDecoder(secret, options), options);\n}\nfunction authenticatorCheckWithWindow(token, secret, options) {\n  return totpCheckWithWindow(token, authenticatorDecoder(secret, options), options);\n}\nclass Authenticator extends TOTP {\n  create(defaultOptions = {}) {\n    return new Authenticator(defaultOptions);\n  }\n  allOptions() {\n    return authenticatorOptions(this.options);\n  }\n  generate(secret) {\n    return authenticatorToken(secret, this.allOptions());\n  }\n  checkDelta(token, secret) {\n    return authenticatorCheckWithWindow(token, secret, this.allOptions());\n  }\n  encode(secret) {\n    return authenticatorEncoder(secret, this.allOptions());\n  }\n  decode(secret) {\n    return authenticatorDecoder(secret, this.allOptions());\n  }\n  generateSecret(numberOfBytes = 10) {\n    return authenticatorGenerateSecret(numberOfBytes, this.allOptions());\n  }\n}\n\nexports.Authenticator = Authenticator;\nexports.HASH_ALGORITHMS = HASH_ALGORITHMS;\nexports.HOTP = HOTP;\nexports.KEY_ENCODINGS = KEY_ENCODINGS;\nexports.OTP = OTP;\nexports.STRATEGY = STRATEGY;\nexports.TOTP = TOTP;\nexports.authenticatorCheckWithWindow = authenticatorCheckWithWindow;\nexports.authenticatorDecoder = authenticatorDecoder;\nexports.authenticatorDefaultOptions = authenticatorDefaultOptions;\nexports.authenticatorEncoder = authenticatorEncoder;\nexports.authenticatorGenerateSecret = authenticatorGenerateSecret;\nexports.authenticatorOptionValidator = authenticatorOptionValidator;\nexports.authenticatorOptions = authenticatorOptions;\nexports.authenticatorToken = authenticatorToken;\nexports.createDigestPlaceholder = createDigestPlaceholder;\nexports.hotpCheck = hotpCheck;\nexports.hotpCounter = hotpCounter;\nexports.hotpCreateHmacKey = hotpCreateHmacKey;\nexports.hotpDefaultOptions = hotpDefaultOptions;\nexports.hotpDigestToToken = hotpDigestToToken;\nexports.hotpKeyuri = hotpKeyuri;\nexports.hotpOptions = hotpOptions;\nexports.hotpOptionsValidator = hotpOptionsValidator;\nexports.hotpToken = hotpToken;\nexports.isTokenValid = isTokenValid;\nexports.keyuri = keyuri;\nexports.objectValues = objectValues;\nexports.padStart = padStart;\nexports.totpCheck = totpCheck;\nexports.totpCheckByEpoch = totpCheckByEpoch;\nexports.totpCheckWithWindow = totpCheckWithWindow;\nexports.totpCounter = totpCounter;\nexports.totpCreateHmacKey = totpCreateHmacKey;\nexports.totpDefaultOptions = totpDefaultOptions;\nexports.totpEpochAvailable = totpEpochAvailable;\nexports.totpKeyuri = totpKeyuri;\nexports.totpOptions = totpOptions;\nexports.totpOptionsValidator = totpOptionsValidator;\nexports.totpPadSecret = totpPadSecret;\nexports.totpTimeRemaining = totpTimeRemaining;\nexports.totpTimeUsed = totpTimeUsed;\nexports.totpToken = totpToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@otplib+core@12.0.1/node_modules/@otplib/core/index.js\n");

/***/ })

};
;